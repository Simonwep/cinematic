(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))s(t);new MutationObserver(t=>{for(const n of t)if(n.type==="childList")for(const d of n.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&s(d)}).observe(document,{childList:!0,subtree:!0});function o(t){const n={};return t.integrity&&(n.integrity=t.integrity),t.referrerpolicy&&(n.referrerPolicy=t.referrerpolicy),t.crossorigin==="use-credentials"?n.credentials="include":t.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(t){if(t.ep)return;t.ep=!0;const n=o(t);fetch(t.href,n)}})();const b=r=>{const e=new ResizeObserver(r);let o;return{watch:n=>{o&&e.unobserve(o),e.observe(n),o=n},destroy:()=>e.disconnect()}},w=r=>{let e=-1;const o=n=>{r(n),e=requestAnimationFrame(o)},s=()=>cancelAnimationFrame(e);return{start:()=>{s(),e=requestAnimationFrame(o)},stop:s}},A=r=>{const e=w(r);let o;const s=()=>{o&&(o.currentTime=0),r()},t=i=>{i.addEventListener("play",e.start),i.addEventListener("pause",e.stop),i.addEventListener("loadeddata",s),i.addEventListener("seeked",r)},n=i=>{i.removeEventListener("play",e.start),i.removeEventListener("pause",e.stop),i.removeEventListener("loadeddata",s),i.removeEventListener("seeked",r)};return{watch:i=>{o&&n(o),t(i),o=i},destroy:()=>{o&&n(o),e.stop()}}},E=(r,e)=>e instanceof HTMLElement?e:r.querySelector(e),S="1.1.0",T=r=>{var g,y;const e=(g=r.document)!=null?g:window.document;let o=.1,s=e.createElement("video"),t=e.createElement("canvas"),n=t.getContext("2d");n.imageSmoothingEnabled=!1;let d=!1;const u=w(()=>{const{width:a,height:c}=t;d&&a&&c&&(n.globalAlpha=o,n.drawImage(s,0,0),d=!1)}),i=b(()=>{(s.videoWidth!==t.width||s.videoHeight!==t.height)&&(t.width=s.videoWidth,t.height=s.videoHeight)}),m=A(()=>{d=!0}),f=a=>{const c=E(e,a);if(!(c instanceof HTMLVideoElement))throw new Error(`Received invalid src, expects selector to HTMLVideoElement or the element itself but got ${c==null?void 0:c.tagName}`);i.watch(c),m.watch(c),s=c},v=a=>{const c=E(e,a);if(!(c instanceof HTMLCanvasElement))throw new Error("Target element has to be a canvas.");t=c,n=c.getContext("2d"),u.start()},h=a=>{if(!(a>0&&a<=1))throw new Error(`Smoothness must be an integer greater than 0 and less or equal than 1, received ${a}`);o=a},L=()=>{u.stop(),i.destroy(),m.destroy()};return h((y=r.sensitivity)!=null?y:.01),f(r.src),v(r.target),{destroy:L,setSource:f,setTarget:v,setSensitivity:h,get target(){return t},get source(){return s}}};const l=Array.from(document.querySelectorAll(".controls > button")),p=window.effect=T({target:".video-container > .video-background",src:".video-container > .video"}),F=async r=>{l.forEach(o=>o.setAttribute("disabled","true"));const e=document.createElement("video");e.classList.add("video"),e.controls=!0,e.autoplay=!0,e.muted=!0,e.addEventListener("canplay",()=>{l.forEach(o=>o.removeAttribute("disabled")),l.forEach(o=>o.classList[o===r?"add":"remove"]("active")),p.source.replaceWith(e),p.setSource(e)}),e.src=`./videos/${r.getAttribute("name")}.mp4`};for(const r of l)r.addEventListener("click",()=>void F(r));console.log(`Using cinematic v${S}`);console.log("Type `effect` in your console to adjust the settings :)");
